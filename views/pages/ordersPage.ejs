<%- include("../layouts/profileList")  %>

<style>
  p{
    color: #000;
    
  }
  /* Custom styles for modal */
.modal-content {
    border-radius: 10px;
}

.modal-header {
    background-color: #c96;
    color: #fff;
    border-radius: 10px 10px 0 0;
}

.modal-body {
    padding: 20px;
}

.modal-footer {
    border-radius: 0 0 10px 10px;
}

/* Adjust close button position */
.close {
    position: absolute;
    right: 20px;
    top: 10px;
    color: #fff;
}

/* Style submit button */
#submitReturn {
    background-color: #28a745;
    border-color: #28a745;
}

#submitReturn:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

/* Style textarea */
textarea.form-control {
    resize: none; /* Prevent resizing of textarea */
}

/* Add margin between buttons */
.modal-footer .btn {
    margin-left: 5px;
    margin-right: 5px;
    
}.order-container{
  overflow-y: auto; /* Enable vertical scrolling */
  scroll-behavior: smooth;
}

</style>


<div class='col-md-9 p-5 right' style=" border-radius:0;">

  <div class="order-container">
    <div class="order-list">
      
  <% if (orderlist.length > 0) { %>
    <% orderlist.slice().reverse().forEach(order => { %>
      
      <ul class="product-list">
              <li class="product-item">
                <div class="product-container">

                  <div class="media" style="display: flex; justify-content: space-between;">
                    
                    <div class="media col-2 " style="width: 300px;">
                    <img style="width: 100px; height: 100px;" src="/uploads/<%= order.productDetail.image[0] %>" class="mr-3 order-image" alt="<%= order.productDetail.name %>">
                  </div>
                    <div class="media-body" style="width: 33%; flex: none;">
                      <h5 class="mt-0"><%= order.productDetail.name %></h5>
                      <p  style="font-weight: 500;">₹<%= order.totalAmount %></p>
                      <p>Quantity: <%= order.products.quantity %></p>
                    </div>

                    <div>
                      <!-- <p><%= order.orderDate.toString().split(' ').slice(0, 4).join(' ') %></p> -->
                      <p style="font-size: larger; font-weight: 400;"><%= order.paymentMethod %></p>
                  
                      <p><a href="/profile/myorders/orderDetails/<%= order._id %>"><button class="btn btn-primary">View Details</button></a></p>
                  
                      <!-- <% if (order.paymentMethod=== 'online' && order.products.status === 'Pending') { %>
                          <p><button class="btn btn-danger pay-now-btn" id="retry"   data-order-id="<%= order._id %>" data-toggle="modal" data-target="#payNowModal">Retry</button></p>
                      <% } %> -->
                  
                      <p style="font-size: larger; font-weight: 400;">Status: <span style="color: rgb(73, 213, 75);" id="deliveryStatus_<%= order.products._id %>"><%= order.products.status %></span></p>
                  </div>
                  

                    <!-- cancel and return -->
                    <div class="container">
                      <div class="row justify-content-center">
                          <div class="col-md-6 text-center">
                              <br>
                              <% if (order.products.status === 'Delivered') { %>
                                <button class="btn btn-dark return-order-btn" style="margin-top: 5px;" data-order-id="<%= order._id %>" data-order-name="<%= order.productDetail.name %>" data-order-amount="<%= order.totalAmount %>" data-toggle="modal" data-target="#returnModal">Return Order</button>
                            <% } else if (order.products.status === 'Cancelled') { %>
                                <span class="can" style="font-size: larger; color: red;">Order Cancelled</span>
                            <% } else if (order.products.status === 'Returned') { %>
                                <span class="can" style="font-size: larger;">Returned</span>
                            <% } else if (order.paymentMethod === 'online' &&  order.products.status === 'Pending') { %>
                                <button class="btn btn-danger pay-now-btn" id="retry" data-order-id="<%= order._id %>" data-toggle="modal" data-target="#payNowModal">Retry</button>
                            <% } else { %>
                                <button class="btn btn-danger cancel-order-btn" style="margin-top: 5px;" data-order-id="<%= order._id %>" data-order-name="<%= order.productDetail.name %>" data-order-amount="<%= order.totalAmount %>" data-toggle="modal" data-target="#cancelOrder">Cancel Order</button>
                            <% } %>
                            
                          </div>
                      </div>
                  </div>
                  
                  

                         <!-- Modal for cancelling order -->
                        <!-- <div class="modal fade" id="cancelOrderModal" tabindex="-1" role="dialog" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
                          <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content">
                              <div class="modal-header">
                                <h5 class="modal-title" style="color: #fff;" id="cancelOrderModalLabel">Cancel Order</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                  <span aria-hidden="true">&times;</span>
                                </button>
                              </div>
                              <div class="modal-body">
                                <p><strong>Order Name:</strong> <span id="cancelOrderName"></span></p>
                                <p><strong>Total Amount:</strong> ₹<span id="cancelOrderAmount"></span></p>
                                <form id="cancelOrderForm">
                                  <div class="form-group">
                                    <label for="cancelReason">Reason:</label>
                                    <textarea class="form-control" id="cancelReason" rows="5" placeholder="Enter reason for cancellation" required></textarea>
                                  </div>
                                </form>
                              </div>
                              <div class="modal-footer">
                                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" id="submitCancelOrder">Submit</button>
                              </div>
                            </div>
                          </div>
                        </div> -->



                        <!-- Modal for reason of return -->
                        <div class="modal fade" id="returnModal" tabindex="-1" role="dialog" aria-labelledby="returnModalLabel" aria-hidden="true">
                          <div class="modal-dialog modal-dialog-centered" role="document">
                              <div class="modal-content">
                                  <div class="modal-header">
                                      <h5 class="modal-title" style="color: #fff;" id="returnModalLabel">Return Order Details</h5>
                                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                          <span aria-hidden="true">&times;</span>
                                      </button>
                                  </div>
                                  <div class="modal-body">
                                      <p><strong>Order Name:</strong> <span id="orderName"></span></p>
                                      <p><strong>Total Amount:</strong> ₹<span id="orderAmount"></span></p>
                                      <!-- Form for entering reason of return -->
                                      <form id="returnForm">
                                          <div class="form-group">
                                              <label for="reason">Reason:</label>
                                              <textarea class="form-control" id="reason" rows="5" placeholder="Enter reason for return" required></textarea>
                                          </div>
                                      </form>
                                  </div>
                                  <div class="modal-footer">
                                      <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                                      <button type="button" class="btn btn-primary" id="submitReturn">Submit</button>
                                  </div>
                              </div>
                          </div>
                        </div>


                  </div>
                  <br><br>
                </div>
              </li>
            <% }) %>
          </ul>
        </div>
    <% } else { %>
      <p>No orders found.</p>
    <% } %>
  </div>
  

    
          


  <!-- profileList end div        -->
</div>
</div>
 <!-- profileList end div        -->

 
<br>
<br>
<%- include("../layouts/mobileNav") %>
<%- include("../layouts/footer")  %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<!-- retry razorpay -->
<script>
 
   document.addEventListener('DOMContentLoaded',function(){
    let button=document.getElementById("retry")
    button.addEventListener('click',function(){
      let orderid=this.getAttribute("data-order-id")
      axios.post("/retryPayment",{orderid})
      .then(res=>{
      
         const totalAmount= res.data.details.totalAmount
         const data= res.data.details._id
        var options = {
          "key": "rzp_test_2gWPLmDC73KBec", // Enter the Key ID generated from the Dashboard
          "amount": totalAmount * 100, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
          "currency": "INR",
          "name": "Victor Shop",
          "description": "Test Transaction",
          "image": "/user/assets/images/new/Victor-Logo.png",
          "order_id": data._id, //This is a sample Order ID. Pass the `id` obtained in the response of the previous step.
          "handler": function (response) {
            console.log(response);
            fetch('/verify-razo', {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                receipt: data._id,
                order_id: response.razorpay_order_id,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_signature: response.razorpay_signature
              })
            })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Failed to verify payment");
              }
              return response.json();
            })
            .then((data) => {
              console.log(data.message); // Log the response from the server
              // Extract order ID and paid amount from the response
              const orderId = data.orderId;
              const paidAmount = data.totalAmount;

              // Display SweetAlert with order ID and paid amount
              Swal.fire({
                title: "Payment Verified",
                text: `Your payment has been successfully verified.\nOrder ID: ${orderId}\nPaid Amount: ${paidAmount}`,
                icon: "success",
                showConfirmButton: true,
              }).then((result) => {
                // Redirect to the "My Orders" page when the user clicks the "OK" button
                if (result.isConfirmed) {
                  console.log("orderid",orderid);
                  axios.post('/successPage',{orderid})
                  .then(res=>{
                     if(res.success){
                      window.location.href="/profile/myorders"
                     } 

                  })
                  
                }
              });
            })
           
          },
          "prefill": {
              "name": "Gaurav Kumar",
              "email": "gaurav.kumar@example.com",
              "contact": "9999999999"
          },
          "notes": {
              "address": "Razorpay Corporate Office"
          },
          "theme": {
              "color": "#F37254"
          }
        };
        var rzp1 = new Razorpay(options);
		rzp1.on('payment.failed' , function (){
			window.location.href='/checkout/payment'
		})
        rzp1.open();
 
 
 
      }).catch(err=>{
        console.log(err);
      })

     

    })
   })
</script>


<!-- order cancel in user side -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
  
    document.querySelectorAll('.cancel-order-btn').forEach(button => {
      button.addEventListener('click', () => {
        const orderId = button.dataset.orderId;
        const statusElement = document.getElementById(`deliveryStatus_${orderId}`);
        
        
        if (statusElement && statusElement.textContent.trim() === 'Cancelled') {
          Swal.fire('Already Cancelled!', 'This order has already been cancelled.', 'info');
          return; 
        }
        
       
        Swal.fire({
        title: 'Are you sure?',
        text: 'Cancel the Order!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/orders/${orderId}/cancel`, {
                method: 'POST'
            })
            .then(response => {
                if (response.ok) {
                    Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success')
                    .then(() => {
                        window.location.href = '/profile/myorders';
                    });
                } else {
                    Swal.fire('Error!', 'Failed to cancel the order.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Error!', 'Failed to cancel the order.', 'error');
            });
        }
    });

      });
    });
  });
</script>


<!-- return order modal -->
<script>

document.querySelectorAll('.return-order-btn').forEach(button => {
    button.addEventListener('click', function() {
    
        orderName = this.dataset.orderName;
        orderAmount = this.dataset.orderAmount;
        const orderId = this.dataset.orderId; 

        document.getElementById('orderName').textContent = orderName;
        document.getElementById('orderAmount').textContent = orderAmount;
        console.log(orderName, orderAmount, orderId);
    });
});

// Reason modal
document.addEventListener('DOMContentLoaded', function() {
    const returnBtn = document.querySelector('.return-order-btn');
    const returnModal = document.getElementById('returnModal');

    returnBtn.addEventListener('click', function() {
        
        $(returnModal).modal('show');
    });

    const submitReturnBtn = document.getElementById('submitReturn');
    submitReturnBtn.addEventListener('click', function() {
        const reason = document.getElementById('reason').value.trim();
        const orderId = document.querySelector('.return-order-btn').dataset.orderId; // Retrieve the order ID

        if (reason.trim() === '') {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Please enter a reason for return!',
            });
        } else {
    
            var data = {
                reason: reason,
                orderAmount: orderAmount,
                orderId: orderId 
            };

           
            fetch('/profile/myorders/returnOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Return submitted successfully.',
                });
                $('#returnModal').modal('hide'); 
                // Reset the form
                $('#returnForm')[0].reset();

                // Update the UI to reflect the new status
                // Assuming the return order button has a class 'return-order-btn'
                const returnOrderButton = document.querySelector('.return-order-btn');
                if (returnOrderButton) {
                    returnOrderButton.style.display = 'none'; // Hide the return order button
                }
                // Show a "Return Pending" message
                const returnPendingMessage = document.createElement('span');
                returnPendingMessage.textContent = 'Return Pending';
                returnPendingMessage.style.fontSize = 'larger';
                // returnPendingMessage.style.color = 'red';  
                returnPendingMessage.classList.add('can'); // Assuming 'can' is a class for styling
                document.querySelector('.text-center').appendChild(returnPendingMessage); // Assuming the button is inside a '.text-center' div
            })

            .catch(error => {
                // Show error alert
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'There was an error submitting the return. Please try again later.',
                });
                console.error('There was an error:', error);
            });
        }
    });
});

</script>

  